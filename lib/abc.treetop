grammar Abc
  rule abc_tune
    abc_header abc_music {
      def notes
        abc_music.notes
      end
    }
  end

  rule abc_header
    field_number comment* field_title other_fields* field_key
  end
  
  rule field_number
    "X:" number end_of_line
  end

  rule field_title
    "T:" text end_of_line
  end

  rule other_fields
    field_composer / field_default_length / field_meter / field_tempo
    / field_voice / field_transcription_notes / field_rhythm /
    comment
  end
    
  rule field_composer
    "C:" text end_of_line
  end
  
  rule field_transcription_notes
    "Z:" text end_of_line
  end
  
  rule field_rhythm
    "R:" text end_of_line
  end
  
  rule field_default_length
    "L:" note_length_strict end_of_line
  end
  
  rule field_meter
    "M:" meter end_of_line
  end
  
  rule field_tempo
    "Q:" tempo end_of_line
  end
  
  rule field_voice
    "V:" text end_of_line
  end
  
  rule field_key
    "K:" key end_of_line
  end

  rule key
    keynote mode_minor?
  end
  
  rule keynote
    basenote key_accidental?
  end
  
  rule key_accidental
    "#" / "b"
  end
  
  rule mode_minor
    "m"
  end
  
  rule meter
    "C" / "C|" / meter_fraction
  end
  
  rule meter_fraction
    positive_number "/" positive_number
  end
  
  rule tempo
    positive_number 
  end
  
  rule positive_number
    [1-9] digit*
  end
  
  rule number
    positive_number / "0"
  end
  
  rule digit
    [0-9]
  end
  
  rule text
    (!newline .)*
  end
  
  rule abc_music
    abc_line+ {
      def notes
        elements.map(&:notes).flatten
      end
    }
  end
  
  rule abc_line
    music_line
    / 
    mid_tune_field
    / 
    comment
    / 
    blank_line
  end
  
  rule music_line
    first_cluster:symbol_cluster others:(space symbol_cluster <Cascade>)* newline {
      def notes
        first_cluster.notes + others.elements.select {|o| o.respond_to?(:notes)}.map(&:notes).flatten
      end
    }
  end
  
  rule symbol_cluster
    beam <Cascade>
    / 
    nth_repeat
    / 
    barline
  end
  
  rule beam
    tuplet_element+ <Cascade>
    / 
    note_element+ <Cascade>
  end

  rule space
    " "*
  end

  rule note_element
    note
    / 
    multi_note <Cascade>
  end
  
  # note is either a pitch or a rest
  rule note
    note_or_rest note_length:note_length tie? {
      def notes
        n = note_or_rest.note
        n = note_length.modify(n) if note_length.respond_to?(:modify)
        [n]
      end
    }
  end
  
  rule note_or_rest
    pitch / rest
  end
  
  rule tie
    "-"
  end
  
  rule pitch
    accidental? basenote octave:octave? {
      def note
        elements
          .select {|e| e.respond_to?(:modify)}
          .inject(basenote.note) do |memo, element|
            element.modify(memo)
          end
      end
    }
  end
  
  rule octave
    "'"+ {
      def modify(note)
        text_value.size.times { note.increment_octave }
        note
      end
    }
    / 
    ","+ {
      def modify(note)
        text_value.size.times { note.decrement_octave }
        note
      end
    }
  end
  
  rule note_length
    numerator:positive_number? denominator:("/" denominator_value:positive_number)? <NoteLength>
  end
  
  rule note_length_strict
    positive_number "/" positive_number
  end
  
  # "^" is sharp, "_" is flat, and "=" is neutral
  rule accidental
    ("^^" / "^" / "__" / "_" / "=") <Accidental>
  end
  
  rule basenote
    octave0_note / octave1_note
  end
  
  rule octave0_note
    [CDEFGAB] {
      def note
        ::Abc::MusicalNote.new(text_value.downcase, octave: 0)
      end
    }
  end
  
  rule octave1_note
    [cdefgab] {
      def note
        ::Abc::MusicalNote.new(text_value, octave: 1)
      end
    }
  end
  
  rule rest
    "z" {
      def note
        ::Abc::MusicalNote.new(text_value)
      end
    }
  end
  
  # tuplets
  rule tuplet_element
    tuplet_spec note_element+ <Cascade>
  end
  
  rule tuplet_spec
    "(" digit 
  end
  
  # chords
  rule multi_note
    "[" note+ "]"
  end
  
  rule barline
    "|:" / "||" / "|]" / "|" / ":|" / "[|" 
  end
  
  rule nth_repeat
    "[1" / "[2" / "|1" / ":|2"
  end
  
  # A voice field might reappear in the middle of a piece
  # to indicate the change of a voice
  rule mid_tune_field
    field_voice
  end
  
  rule blank_line
    space newline
  end
    
  rule comment
    "%" text newline
  end
  
  rule end_of_line
    comment / newline
  end
  
  rule newline
    [\r] [\n] / [\n] / [\r]
  end
end
