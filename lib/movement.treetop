grammar Movement
  rule action_sequence
    action space "," space action_sequence {
      def perform(position)
        action_sequence.perform(action.perform(position))
      end
    }
    /
    action 
  end

  rule action
    "move" space direction {
      def perform(position)
        position.moved_by(direction.offset)
      end
    }
    /
    "move" space numsteps space direction {
      def perform(position)
        offset = direction.offset.map {|n| n * numsteps.size }
        position.moved_by(offset)
      end
    }
  end
  
  rule numsteps
    number {
      def size
        text_value.to_i
      end
    }
  end
  
  rule space
    " "*
  end
  
  rule direction
    ("north" / "south" / "east" / "west") {
      def offset
        case text_value
        when "north" then
          [0,1]
        when "south" then
          [0,-1]
        when "east" then
          [1,0]
        when "west" then
          [-1,0]
        end
      end
    }
  end
  
  rule number
    '-'? [1-9] [0-9]*
  end
end
